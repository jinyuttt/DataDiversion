/**    
 * 文件名：TCPSocket.java    
 *    
 * 版本信息：    
 * 日期：2017年5月27日    
 * Copyright 足下 Corporation 2017     
 * 版权所有    
 *    
 */
package JNetSocket;

import java.io.IOException;
import java.net.DatagramPacket;
import java.net.DatagramSocket;
import java.net.InetAddress;
import java.net.ServerSocket;
import java.net.SocketAddress;
import java.net.SocketException;
import java.net.UnknownHostException;

/**    
 *     
 * 项目名称：JNetSocket    
 * 类名称：TCPSocket    
 * 类描述：    
 * 创建人：jinyu    
 * 创建时间：2017年5月27日 上午12:09:42    
 * 修改人：jinyu    
 * 修改时间：2017年5月27日 上午12:09:42    
 * 修改备注：    
 * @version     
 *     
 */
public class TCPServerSocket {
    private IRecData recInstance=null;
    SocketAddress sendAddress=null;
    private boolean isRuning=true;
    ServerSocket  socket=null;
    public boolean InitServer(IRecData rec,String host,int port)
    {
        recInstance=rec;
      //创建DatagramSocket对象  
        if(host==null||host.isEmpty())
        {
            try {
                socket = new ServerSocket(port);
            } catch (SocketException e) {
               
                e.printStackTrace();
                return false;
            }  
        }
        else
        {
            InetAddress addr = null;
            try {
                addr = InetAddress.getByName(host);
            } catch (UnknownHostException e) {
                e.printStackTrace();
                return false;
            }
            try {
                socket = new ServerSocket(port,addr);
            } catch (SocketException e) {
                e.printStackTrace();
                return false;
            }  
        }
        try {
            socket.setReceiveBufferSize(128);
        } catch (SocketException e) {
            e.printStackTrace();
        }
        Thread recData=new Thread(new Runnable(){
            @Override
            public void run() {
                byte[] buf = new byte[1024];  //定义byte数组  
                DatagramPacket packet = new DatagramPacket(buf, buf.length);  //创建DatagramPacket对象  
                while(isRuning)
                {
                try {
                    socket.receive(packet);
                } catch (IOException e) {
                    e.printStackTrace();
                } 
                //从服务器返回给客户端数据  
                String clientAddress = packet.getAddress().getHostName(); //获得客户端的IP地址  
                int clientPort = packet.getPort(); //获得客户端的端口号  
                if(recInstance!=null)
                {
                    byte[]data=packet.getData();
                    recInstance.setServer(socket);
                    recInstance.recviceData(clientAddress+":"+clientPort, data);
                }
            }
                socket.close();//跳出循环则关闭
            }
            
        });
        recData.setDaemon(true);
        recData.setName("UDPServer");
        recData.start();
        return false;
     
    }
    public void close()
    {
        isRuning=false;
        socket.close();
    }
}
